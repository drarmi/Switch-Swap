// This mixin generates media query rules for screen sizes down to a specified breakpoint.
@mixin media-breakpoint-down($size) {
    @if $size==xxl {
        @media (max-width: 1360px) {
            @content;
        }
    } @else if $size==xl {
        @media (max-width: 1200px) {
            @content;
        }
    } @else if $size==lg {
        @media (max-width: 991px) {
            @content;
        }
    } @else if $size==md {
        @media (max-width: 767px) {
            @content;
        }
    } @else if $size==sm {
        @media (max-width: 575px) {
            @content;
        }
    } @else if $size==xs {
        @media (max-width: 479px) {
            @content;
        }
    } @else if $size==xxs {
        @media (max-width: 379px) {
            @content;
        }
    }
}

// This mixin generates media query rules for screen sizes up from a specified breakpoint.
@mixin media-breakpoint-up($size) {
    @if $size==xxl {
        @media (min-width: 1360px) {
            @content;
        }
    } @else if $size==xl {
        @media (min-width: 1200px) {
            @content;
        }
    } @else if $size==lg {
        @media (min-width: 991px) {
            @content;
        }
    } @else if $size==md {
        @media (min-width: 767px) {
            @content;
        }
    } @else if $size==sm {
        @media (min-width: 575px) {
            @content;
        }
    } @else if $size==xs {
        @media (min-width: 479px) {
            @content;
        }
    } @else if $size==xxs {
        @media (min-width: 379px) {
            @content;
        }
    }
}

// This mixin generates @font-face rules for embedding custom fonts into your stylesheets.
@mixin font-face($font-name, $path, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($path + ".eot");
        src: url($path + ".eot?#iefix") format("embedded-opentype"), url($path + ".woff") format("woff"), url($path + ".woff2") format("woff2"), url($path + ".ttf") format("truetype"), url($path + ".svg##{$font-name}") format("svg"), url($path + ".eot") format("embedded-opentype"), url($path + ".eot?#iefix") format("embedded-opentype");
        font-weight: $weight;
        font-style: $style;
    }
}

// This function replaces occurrences of a specified substring in a string with another substring.
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// This function encodes special characters in a string to ensure valid URL encoding.
@function url-encode($string) {
    $map: (
        "%": "%25",
        "<": "%3C",
        ">": "%3E",
        " ": "%20",
        "!": "%21",
        "*": "%2A",
        "'": "%27",
        '"': "%22",
        "(": "%28",
        ")": "%29",
        ";": "%3B",
        ":": "%3A",
        "@": "%40",
        "&": "%26",
        "=": "%3D",
        "+": "%2B",
        "$": "%24",
        ",": "%2C",
        "/": "%2F",
        "?": "%3F",
        "#": "%23",
        "[": "%5B",
        "]": "%5D",
    );

    $new: $string;

    @each $search, $replace in $map {
        $new: str-replace($new, $search, $replace);
    }

    @return $new;
}

// This function converts an SVG string to a data URL for embedding in stylesheets.
@function inline-svg($string) {
    @return url("data:image/svg+xml,#{url-encode($string)}");
}
